#split up merged GO terms#
term=c()#
name=c()#
for (i in 1:nrow(sigGos0)){#
	row = sigGos0[i,]#
	go = unlist(strsplit(as.character(row$term), ';'))#
	n = rep(row$name, length(go))#
	term=append(term, go)#
	names=append(name, n)#
}#
sigGos = data.frame(term, names)#
sigGos
goGenes = gdat[gdat$term %in% sigGos$term,]#
head(goGenes)
goGenes
ABS.VALUE
goGenes = gdat[gdat$term %in% sigGos$term & gdat$value >= ABS.VALUE,]
goGenes
adat = read.table("~/gitreps/convergent_evo_coral/ortholog_tables/singleCopyAnnotations.tsv", header = T)[,c(1,2)]
colnames(adat) = c('contig', 'swissProt_hits')
head(adat)
goGenes
colnames(adat) = c('seq', 'swissProt_hits')
goGenes = gdat[gdat$term %in% sigGos$term & gdat$value >= ABS.VALUE,]#
goGenes
m=merge(goGenes, adat, by = 'seq')
head(m)
m
nrow(goGenes)
nrow(m)
adat = read.table("~/gitreps/convergent_evo_coral/ortholog_tables/singleCopyAnnotations.tsv", header = T)[,c(1,2)]#
colnames(adat) = c('seq', 'swissProt_hits')
head(adat)
nrow(adat)
library("biomaRt")#
hsembl = useMart("ensembl", dataset="hsapiens_gene_ensembl") #get the human dataset
hnames = getBM(attributes = c('ensembl_gene_id', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)
geneSet = c("ZC12C_HUMAN")
hnames = getBM(attributes = c('ensembl_gene_id', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)
hnames
? useMart
listMarts()
?getBM
listFilters()
listFilters(hsembl)
geneSet = c("ZC12C")
hnames = getBM(attributes = c('ensembl_gene_id', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)
hnames
hnames = getBM(attributes = c('external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)#
hnames
f=listFilters(hsembl)
head(f)
f[grep('sp',f$name)]
f[grep('sp',f$name),]
listMarts()
hnames = getBM(attributes = c('external_gene_name','description'), filters = c('uniprotswissprot'), values = geneSet, mart = hsembl)
hnames
goGenes
head(adat)
geneSet = c("Q9C0D7")
hnames = getBM(attributes = c('external_gene_name','description'), filters = c('uniprotswissprot'), values = geneSet, mart = hsembl)#
hnames
head(adat)
i=1
annots = strsplit(as.character(row$swissProt_hits), ';')
annots
row=adat[i,]
annots = strsplit(as.character(row$swissProt_hits), ';')
annots
sp = sapply(annots, function(x) strsplit(x, "|")[[1]][1])
sp
sp = sapply(annots, function(x) strsplit(x, "|")[[1]])
sp
annots
annots = unlist(strsplit(as.character(row$swissProt_hits), ';'))
annots
sp = sapply(annots, function(x) strsplit(x, "|")[[1]])
sp
?strsplit
sp = sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]])
sp
sp = sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1])
sp
sp = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1]))
sp
head(row)
id = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][2]))
id
swissProt = c()#
ortho = c()#
name = c()#
for (i in 1:nrow(adat)){#
	row=adat[i,]#
	annots = unlist(strsplit(as.character(row$swissProt_hits), ';'))#
	sp = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1]))#
	id = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][2]))#
	seqs = rep(row$seq, length(sp))#
	ortho = append(ortho, seqs)#
	swissProt = append(swissProt, seqs)#
	name = append(name, id)#
}
adf = data.frame(ortho, swissProt, name)
head(adf)
db = sapply(adf$name, function(x) strsplit(x, "_")[[1]][2])
db = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][2])
head(db)
length(db)
nrow(adf)
adf$db=db
head(adf)
length(unique(db))
ortho
seqs
as.character(row$seq)
swissProt = c()#
ortho = c()#
name = c()#
for (i in 1:nrow(adat)){#
	row=adat[i,]#
	annots = unlist(strsplit(as.character(row$swissProt_hits), ';'))#
	sp = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1]))#
	id = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][2]))#
	seqs = rep(as.character(row$seq), length(sp))#
	ortho = append(ortho, seqs)#
	swissProt = append(swissProt, seqs)#
	name = append(name, id)#
}#
adf = data.frame(ortho, swissProt, name)#
db = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][2])#
adf$db=db#
head(adf)
head(adf)
swissProt = c()#
ortho = c()#
name = c()#
for (i in 1:nrow(adat)){#
	row=adat[i,]#
	annots = unlist(strsplit(as.character(row$swissProt_hits), ';'))#
	sp = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1]))#
	id = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][2]))#
	seqs = rep(as.character(row$seq), length(sp))#
	ortho = append(ortho, seqs)#
	swissProt = append(swissProt, seqs)#
	name = append(name, id)#
}#
adf = data.frame(ortho, swissProt, name)#
db = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][2])#
adf$db=db#
head(adf)
length(unique(adf$db))
head(f)
#add human annotations#
library("biomaRt")#
hsembl = useMart("ensembl", dataset="hsapiens_gene_ensembl") #get the human dataset#
f=listFilters(hsembl)#
head(f)
sub = adf[adf$db=='HUMAN',]
row
swissProt = c()#
ortho = c()#
name = c()#
for (i in 1:nrow(adat)){#
	row=adat[i,]#
	annots = unlist(strsplit(as.character(row$swissProt_hits), ';'))#
	sp = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][1]))#
	id = unlist(sapply(annots, function(x) strsplit(x, "|", fixed=T)[[1]][2]))#
	seqs = rep(as.character(row$seq), length(sp))#
	ortho = append(ortho, seqs)#
	swissProt = append(swissProt, sp)#
	name = append(name, id)#
}#
adf = data.frame(ortho, swissProt, name)#
db = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][2])#
adf$db=db#
head(adf)
sub = adf[adf$db=='HUMAN',]#
geneSet = sub$swissProt
head(sub)
head(adf)
head(adf)
sub = adf[adf$db=='HUMAN' & !is.na(adf$db),]
head(sub)
geneSet = sub$swissProt
hnames = getBM(attributes = c('external_gene_name','description'), filters = c('uniprotswissprot'), values = geneSet, mart = hsembl)
head(hnames)
dim(hnames)
dim(sub)
head(f)
f$name[grep('sp', f$name)]
hnames = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('uniprotswissprot'), values = geneSet, mart = hsembl)
head(hnames)
head(sub)
gnames=hnames
colnames(gnames)[1] = c('swissProt')
sub2 = merge(sub, gnames, by = 'swissProt')
nrow(sub)
nrow(sub2)
head(sub2)
sub2 = merge(sub, gnames, by = 'swissProt', all.x=T)
nrow(sub2)
nrow(sub)
head(sub)
head(adf)
adf = data.frame(ortho, swissProt, name)#
db = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][2])#
egn = sapply(as.character(adf$name), function(x) strsplit(x, "_")[[1]][1])#
adf$egn = egn#
adf$db=db#
head(adf)
geneSet = sub$egn
#add human annotations#
library("biomaRt")#
hsembl = useMart("ensembl", dataset="hsapiens_gene_ensembl") #get the human dataset#
f=listFilters(hsembl)#
head(f)#
sub = adf[adf$db=='HUMAN' & !is.na(adf$db),]#
geneSet = sub$egn
head(geneSet)
gnames = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)
head(gnames)
geneSet = unique(sub$egn)
gnames = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)#
colnames(gnames)[1] = c('swissProt')#
head(gnames)
gnames2 = gnames[!duplicated(gnames$external_gene_name),]
head(gnames2)
head(sub)
des = gnames2$description[gnames2$external_gene_name==sub$egn]
x='RN5A'
g=gnames2[gnames2$external_gene_name==x,]
g
x='PLPP7'
g=gnames2[gnames2$external_gene_name==x,]
g
get.description = function(gnames2){#
	g=gnames2[gnames2$external_gene_name==x,]#
	return(g$description)#
}
get.description = function(x){#
	g=gnames2[gnames2$external_gene_name==x,]#
	return(g$description)#
}
get.description(x)
des = sapply(sub$egn, function(x) get.description(x))
head(des)
des = unlist(sapply(sub$egn, function(x) get.description(x)))
head(des)
length(des)
nrow(sub)
head(sub)
gnames.sp = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('uniprotswissprot'), values = geneSet, mart = hsembl)#
gnames.egn = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('external_gene_name'), values = geneSet, mart = hsembl)
head(gnames.sp)
head(sub)
spSet = unique(sub$swissProt)#
egnSet = unique(sub$egn)#
gnames.sp = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('uniprotswissprot'), values = spSet, mart = hsembl)#
gnames.egn = getBM(attributes = c('uniprotswissprot', 'external_gene_name','description'), filters = c('external_gene_name'), values = egnSet, mart = hsembl)
head(gnames.sp)
head(gnames.egn)
nrow(gnames.sp)
nrow(gnames.egn)
nrow(sub)
gm = merge(gnames.sp, gnames.egn, by = 'external_gene_name')
nrow(gm)
gm = merge(gnames.sp, gnames.egn, by = 'external_gene_name', all=T)
nrow(gm)
g = gm[!duplicated(gm$external_gene_name),]
nrow(g)
head(g)
head(g, n=30)
head9sub
head(sub)
x='RN5A'
get.description(x)
z=get.description(x)
z
length(z)
length("ATP binding cassette subfamily D member 2 [Source:HGNC Symbol;Acc:HGNC:66]")
x='RN5A'#
get.description = function(x){#
	g=gnames2[gnames2$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g$description)#
		}#
}#
z=get.description(x)
z
des = unlist(sapply(sub$egn, function(x) get.description(x)))
get.description = function(x){#
	g=gnames2[gnames2$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g$description)#
		}#
}#
z=get.description(x)#
des = unlist(sapply(sub$egn, function(x) get.description(x)))
head(sub)
get.description = function(x){#
	g= gnames.sp[gnames.sp$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g$description)#
		}#
}#
z=get.description(x)
des = unlist(sapply(sub$egn, function(x) get.description(x)))
head(gnames.sp)
get.description = function(x){#
	g=gnames.sp[gnames.sp$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g$description)#
		}#
}
des = unlist(sapply(sub$egn, function(x) get.description(x)))
head(sub)
get.description = function(x){#
	g=gnames.sp[gnames.sp$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g)#
		}#
}
des = unlist(sapply(sub$egn, function(x) get.description(x)))
head(des)
length(des)
nrow(sub)
length(sub$egn)
head(des)
des = data.frame(unlist(sapply(sub$egn, function(x) get.description(x))))
head(des)
nrow(des)
head(gnames.sp)
gnames = gnames.sp[!duplicated(gnames.sp$external_gene_name),]
get.description = function(x){#
	g=gnames.sp[gnames.sp$external_gene_name==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g)#
	}#
}#
#
des = data.frame(unlist(sapply(sub$egn, function(x) get.description(x))))
nrow(des)
head(des)
des =unlist(sapply(sub$egn, function(x) get.description(x)))
dres = data.frame(des)
des =unlist(sapply(sub$egn, function(x) get.description(x)))
dres = data.frame(des)
rownames(dres) = names(des)
head(dres)
length(des[des!='none'])
nrow(sub)
head(gnames.sp)
nrow(gnames.sp)
length(spSet)
nrow(sub)
nrow(na.omit(sub))
head(sub)
head(spSet)
head(gnames)
head(gnames.sp)
head(sub)
get.description = function(x){#
	g=gnames.sp[gnames.sp$uniprotswissprot==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g)#
	}#
}#
#
des =unlist(sapply(sub$swissProt, function(x) get.description(x)))
length(des)
nrow(sub)
get.description = function(x){#
	g=gnames.sp[gnames.sp$uniprotswissprot==x, 'description']#
	if (length(g) < 1){#
		return('none')#
	}#
	else{#
		return(g[1])#
	}#
}#
#
des =unlist(sapply(sub$swissProt, function(x) get.description(x)))
length(des)
head(des)
res = data.frame(sub$sp, des)
res = data.frame(sub$swissProt, des)
colnames(res) = c('swissProt', 'description')
head(res)
colnames(res) = c('swissProt2', 'description')
head(res)
sub2 = cbind(sub, res)
head(sub2)
sum(sub2$swissProt==sub2$swissProt2)
sum(sub2$swissProt==sub2$swissProt2)==nrow(sub2)
sub2$swissProt2<-NULL
td = length(unique(sub2$ortho))
head(adat)
ta = length(unique(adat$seq))
td / ta * 100
round(td / ta, digits=3) * 100
round(td / ta, digits=4) * 100
paste(pct, "%", sep = '')
pct = round(td / ta, digits=4) * 100#
paste(pct, "%", sep = '')
?useMart
useMart('ensembl')
listDatasets(mart)
mart = useMart('ensembl')
listDatasets(mart)
l=listDatasets(mart)
l[grep('mus', l)]
