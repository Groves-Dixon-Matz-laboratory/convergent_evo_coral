library(tidyverse)#
ll= load('~/gitreps/convergent_evo_coral/overlap_results/moderate/allResults.Rdata')
#total convergence events between verticals#
pass = conv_filt %>% filter(conv_pair=='VV' & conv_pass) #
length(unique(pass$site))
length(unique(pass$ortholog))
head(bs_filt)
length(unique(bs_filt$ortholog))
#total convergence events between verticals#
conv = conv_filt %>% filter(conv_pair=='VV' & conv_pass & type=='convergent (L>V; S>V)') #
para = conv_filt %>% filter(conv_pair=='VV' & conv_pass & type=='parallel (L>V; L>V)') #
tc=length(unique(conv$site))#
tp=length(unique(para$site))#
tc#
tp#
tc+tp
#number of genes showing at least one VV convergence event#
pass = conv_filt %>% filter(conv_pair=='VV' & conv_pass)#
length(unique(pass$ortholog))
pass = conv_filt %>% mutate(posPass=c1PosGene | c2PosGene) %>% filter(conv_pair=='VV' & conv_pass & posPass)#
length(unique(pass$ortholog))
head(bs_filt)
setwd("~/gitreps/convergent_evo_coral")
gids = read.table("ortholog_tables/singleCopyAnnotationsWithDescriptions.tsv", sep='\t', quote="", header = T)
head(gids)
colnames(gids)[1]='ortholog'
passingGenes = unique(bs_filt$ortholog[bs_filt$bs_pass & bs_filt$bs_phenotype=='Vertical'])
head(gids)
length(passingGenes)
bs_filt %>% left_join(gids, by = 'ortholog')
bsPassTable<- bs_filt %>% #
	left_join(gids, by = 'ortholog') %>%#
	arrange(ortholog)
bsPassTable
bsPassTable<- bs_filt %>% #
	filter(bs_pass) %>%#
	left_join(gids, by = 'ortholog') %>%#
	arrange(ortholog)
bsPassTable
bsPassTable<- bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	arrange(ortholog)
head(gds)
head(gids)
gids = read.table("ortholog_tables/singleCopyAnnotationsWithDescriptions.tsv", sep='\t', quote="", header = T) %>% as_tibble
gids
gids = read.table("ortholog_tables/singleCopyAnnotationsWithDescriptions.tsv", sep='\t', quote="", header = T, stringsAsFactors=F) %>% as_tibble
bsPassTable<- bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	arrange(ortholog)
colnames(gids)[1]='ortholog'
passingGenes = unique(bs_filt$ortholog[bs_filt$bs_pass & bs_filt$bs_phenotype=='Vertical'])#
length(passingGenes)#
bsPassTable<- bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	arrange(ortholog)
bsPassTable
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numberic(sub('ORTHOMCL', '', ortholog)))
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog)))
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog)))#
	arrange(number)
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog)))#
	arrange(number)
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog))) %>%#
	arrange(number)
bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog))) %>%#
	arrange(number) %>%#
	select(ortholog, p.values, adj.p, clade, swissProt, egn, db, description)
colnames(bsPassTable) = c('ortholog', 'raw_pvalue', 'adjusted_p', 'clade', 'swissprot', 'entrez', 'entrez_db', 'description')
write.table(bsPassTable, file='~/Desktop/branch_site_passing_genes.tsv', sep='\t', quote=F, row.names=F)
bsPassTable<- bs_filt %>% #
	filter(bs_pass, bs_phenotype=='Vertical') %>%#
	left_join(gids, by = 'ortholog') %>%#
	mutate(number=as.numeric(sub('ORTHOMCL', '', ortholog))) %>%#
	arrange(number) %>%#
	select(ortholog, p.values, adj.p, clade, swissProt, egn, db, description)
bsPassTable
colnames(bsPassTable) = c('ortholog', 'raw_pvalue', 'adjusted_p', 'clade', 'swissprot', 'entrez', 'entrez_db', 'description')
bsPassTable
write.table(bsPassTable, file='~/Desktop/branch_site_passing_genes.tsv', sep='\t', quote=F, row.names=F)
rm(list=ls())
# Edit these to match your data file names: #
setwd("~/gitreps/convergent_evo_coral/overlap_results/moderate/GO_MWU")#
#
# #select input file#
# input="GOMWU_input1_branchSitesVertical.csv"#
# input="GOMWU_input2_convergence_overlap.csv"#
# input="GOMWU_input3_bs_convergence_overlap.csv"#
# input="GOMWU_input3_bs_convergence_overlapHH.csv"#
# goAnnotations="singleCopyAnnotations.tsv_GO.tsv"   #old version made from idmapping_selected.tab (don't use this)#
goAnnotations="singleCopyAnnotations_GO_gomwu.tsv" #new better version made from goa_uniprot_all.gaf#
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml#
# goDivision="CC"     # either MF, or BP, or CC#
source("gomwu.functions.R")
inputs = c(#
	'GOMWU_input1_branchSitesVertical.csv',#
	'GOMWU_input2_covergenceVV.csv',#
	'GOMWU_input3_bs_convergence_overlapVV.csv',#
	'GOMWU_input1_branchSitesHorizontal.csv',#
	'GOMWU_input2_covergenceHH.csv',#
	'GOMWU_input3_bs_convergence_overlapHH.csv',#
	'GOMWU_input4_flagged_convergence_overlapVV.csv',#
	'GOMWU_input4_flagged_convergence_overlapHH.csv'#
	)
goDivisions = c('CC', 'MF', 'BP')
#Loop through inputs and GO divisions running GO_MWU for all#
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
#
		#Run GO MWU#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", #
			largest=0.1,  #
			smallest=200,   #
			clusterCutHeight=0.25, #
			Alternative="g"#
		)#
		#Save top 20#
		resName = paste(paste('MWU', goDivision, sep = "_"), input, sep = "_")#
		res=read.table(resName, header = T)#
		res=res[order(res$pval),]#
		tabOut = paste('..', sub(".csv", "_top20.tsv", resName), sep="/")#
		tabOut#
		write.table(head(res, n=20), file=tabOut, quote=F, sep="\t")#
	}#
}
getwd()
input='GOMWU_input3_bs_convergence_overlapVV.csv'
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are too many categories displayed, try make it more stringent with level1=0.05,level2=0.01,level3=0.001.
goDivision
goDivision="CC"     # either MF, or BP, or CC
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are
goDivision="MF"     # either MF, or BP, or CC
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are too many categories displayed, try make it more stringent with level1=0.05,level2=0.01,level3=0.001.
