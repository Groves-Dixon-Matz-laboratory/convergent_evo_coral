inputs = c('GOMWU_input1_branchSitesVertical.csv', 'GOMWU_input2_bs_convergence_overlapVV.csv', 'GOMWU_input3_bs_convergence_overlapVV.csv')
inputs = c('GOMWU_input1_branchSitesVertical.csv', 'GOMWU_input2_bs_convergence_overlapVV.csv', 'GOMWU_input3_bs_convergence_overlapVV.csv');ABS.VALUE=0.99
setwd("~/gitreps/convergent_evo_coral/overlap_results/moderateV2/GO_MWU")
# goAnnotations="singleCopyAnnotations.tsv_GO.tsv"   #old version made from idmapping_selected.tab (don't use this)#
goAnnotations="singleCopyAnnotations_GO_gomwu.tsv" #new better version made from goa_uniprot_all.gaf#
#
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml#
goDivision="CC"     # either MF, or BP, or CC#
source("gomwu.functions.R")
input="GOMWU_input1_branchSitesVertical.csv"; ABS.VALUE=0.99  #significance for branch sites for all vertical minus all antivertical
for (input in inputs){#
	print('----------------')#
	print(paste('RUNNING FOR ', input))#
	print('----------------')#
	# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
	gomwuStats(input, goDatabase, goAnnotations, goDivision,#
		perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
		largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
		smallest=200,   # a GO category should contain at least this many genes to be considered#
		clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
		Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
	#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
	#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
	)#
	# do not continue if the printout shows that no GO terms pass 10% FDR.#
}
input='GOMWU_input1_branchSitesVertical.csv';  #significance for branch sites for all vertical minus all antivertical
goAnnotations="singleCopyAnnotations.tsv_GO.tsv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.#
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml#
goDivision="CC"     # either MF, or BP, or CC#
source("gomwu.functions.R")
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are too many
goAnnotations="singleCopyAnnotations.tsv_GO.tsv" # two-column, tab-delimited, one line per gene, multiple GO terms separated by semicolon. If you have multiple lines per gene, use nrify_GOtable.pl prior to running this script.#
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml#
goDivision="CC"     # either MF, or BP, or CC#
source("gomwu.functions.R")
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are
getwd()
goDivisions = c('CC')
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
		# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
			largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
			smallest=200,   # a GO category should contain at least this many genes to be considered#
			clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
			Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
		#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
		#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
		)#
		# do not continue if the printout shows that no GO terms pass 10% FDR.#
}
goDivisions = c('CC')
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
		# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
			largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
			smallest=200,   # a GO category should contain at least this many genes to be considered#
			clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
			Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
		#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
		#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
		)#
		# do not continue if the printout shows that no GO terms pass 10% FDR.#
	}#
}
goDivisions
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
		# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
			largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
			smallest=200,   # a GO category should contain at least this many genes to be considered#
			clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
			Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
		#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
		#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
		)#
		# do not continue if the printout shows that no GO terms pass 10% FDR.#
	}#
}
for (input in inputs){#
	print('----------------')#
	print(paste(paste('RUNNING FOR ', input), goDivision))#
	print('----------------')#
	# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
	gomwuStats(input, goDatabase, goAnnotations, goDivision,#
		perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
		largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
		smallest=200,   # a GO category should contain at least this many genes to be considered#
		clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
		Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
	#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
	#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
	)#
	# do not continue if the printout shows that no GO terms pass 10% FDR.#
}
setwd("~/gitreps/convergent_evo_coral/overlap_results/moderateV2/GO_MWU")
rm(list=ls())
setwd("~/gitreps/convergent_evo_coral/overlap_results/moderateV2/GO_MWU")
input="GOMWU_input1_branchSitesVertical.csv"; ABS.VALUE=0.99  #significance for branch sites for all vertical minus all antivertical
# goAnnotations="singleCopyAnnotations.tsv_GO.tsv"   #old version made from idmapping_selected.tab (don't use this)#
goAnnotations="singleCopyAnnotations_GO_gomwu.tsv" #new better version made from goa_uniprot_all.gaf#
goDatabase="go.obo" # download from http://www.geneontology.org/GO.downloads.ontology.shtml#
goDivision="CC"     # either MF, or BP, or CC#
source("gomwu.functions.R")
print('----------------')#
	print(paste(paste('RUNNING FOR ', input), goDivision))#
	print('----------------')#
	# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
	gomwuStats(input, goDatabase, goAnnotations, goDivision,#
		perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
		largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
		smallest=200,   # a GO category should contain at least this many genes to be considered#
		clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
		Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
	#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
	#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
	)#
	# do not continue if the
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there ar
inputs = c('GOMWU_input1_branchSitesVertical.csv', 'GOMWU_input2_bs_convergence_overlapVV.csv', 'GOMWU_input3_bs_convergence_overlapVV.csv');ABS.VALUE=0.99
for (input in inputs){#
	print('----------------')#
	print(paste(paste('RUNNING FOR ', input), goDivision))#
	print('----------------')#
	# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
	gomwuStats(input, goDatabase, goAnnotations, goDivision,#
		perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
		largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
		smallest=200,   # a GO category should contain at least this many genes to be considered#
		clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
		Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
	#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
	#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
	)#
	# do not continue if the printout shows that no GO terms pass 10% FDR.#
}
quartz()
input='GOMWU_input1_branchSitesVertical.csv';  #significance for branch sites for all vertical minus all antivertical
goDivision="CC"     # either MF, or BP, or CC
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there ar
input='GOMWU_input3_bs_convergence_overlapVV.csv';
# Plotting results#
quartz()#
gomwuPlot(input,goAnnotations,goDivision,#
	absValue=0.99,  # genes with the measure value exceeding this will be counted as "good genes". Specify absValue=0.001 if you are doing Fisher's exact test for standard GO enrichment or analyzing a WGCNA module (all non-zero genes = "good genes").#
	level1=0.1, # FDR threshold for plotting. Specify level1=1 to plot all GO categories containing genes exceeding the absValue.#
	level2=0.05, # FDR cutoff to print in regular (not italic) font.#
	level3=0.01, # FDR cutoff to print in large bold font.#
	txtsize=1.2,    # decrease to fit more on one page, or increase (after rescaling the plot so the tree fits the text) for better "word cloud" effect#
	treeHeight=0.5, # height of the hierarchical clustering tree#
#	colors=c("dodgerblue2","firebrick1","skyblue","lightcoral") # these are default colors, un-remar and change if needed#
)#
# manually rescale the plot so the tree matches the text #
# if there are too many
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
		# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
			largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
			smallest=200,   # a GO category should contain at least this many genes to be considered#
			clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
			Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
		#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
		#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
		)#
		# do not continue if the printout shows that no GO terms pass 10% FDR.#
	}#
}
goDivisions = c('CC')
for (input in inputs){#
	for (goDivision in goDivisions){#
		print('----------------')#
		print(paste(paste('RUNNING FOR ', input), goDivision))#
		print('----------------')#
		# Calculating stats. It might take ~3 min for MF and BP. Do not rerun it if you just want to replot the data with different cutoffs, go straight to gomwuPlot. If you change any of the numeric values below, delete the files that were generated in previos runs first.#
		gomwuStats(input, goDatabase, goAnnotations, goDivision,#
			perlPath="perl", # replace with full path to perl executable if it is not in your system's PATH already#
			largest=0.1,  # a GO category will not be considered if it contains more than this fraction of the total number of genes#
			smallest=200,   # a GO category should contain at least this many genes to be considered#
			clusterCutHeight=0.25, # threshold for merging similar (gene-sharing) terms. See README for details.#
			Alternative="g" # by default the MWU test is two-tailed; specify "g" or "l" of you want to test for "greater" or "less" instead. #
		#	Module=TRUE,Alternative="g" # un-remark this if you are analyzing a SIGNED WGCNA module (values: 0 for not in module genes, kME for in-module genes). In the call to gomwuPlot below, specify absValue=0.001 (count number of "good genes" that fall into the module)#
		#	Module=TRUE # un-remark this if you are analyzing an UNSIGNED WGCNA module #
		)#
		# do not continue if the printout shows that no GO terms pass 10% FDR.#
	}#
}
input='GOMWU_input1_branchSitesVertical.csv';  #significance for branch sites for all vertical minus all antivertical
